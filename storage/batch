#!/usr/bin/python

import re
import os
import sys
import getopt
import random
import urllib2
from socket import gethostname

def parse_args(argv):
    try:
        opts, args = getopt.getopt(argv, "f:d:hu", ["fqdn=","directory=","help","usage"])
    except getopt.GetoptError as err:
        usage()
        sys.exit(2)

    args = {}
    args['directory'] = "."
    args['fqdn'] = gethostname()
    for o, a in opts:
        if o in ("-h", "-u", "--usage", "--help"):
            usage()
            sys.exit(1)
        elif o in ("-d", "--directory"):
            args['directory'] = a
        elif o in ("-f", "--fqdn"):
            args['fqdn'] = a

    return args

def get_object_nodes(account, bucket, obj):
    url = "http://braastad.org/scs/%s/%s/%s?nodes" % (account, bucket, obj)
    nodes = {}
    try:
        conn = urllib2.urlopen(url)
        code = conn.getcode()
        if code == 200:
            s = re.compile("^(\S+)\s+\[(\d+)\]")
            for line in conn.read().split('\n'):
                m = s.search(line)
                if m:
                    nodes[m.group(1)] = m.group(2)

        conn.close()
    except urllib2.HTTPError, e:
        code = e.getcode()

    return nodes

def get_accounts(directory):
    accounts = []
    try:
        entries = os.listdir(directory)

    except:
        print "Unable to read directory %s" % (directory)
        sys.exit(1)

    for e in entries:
        dir_path = "%s/%s" % (directory, e)
        if os.path.isdir(dir_path):
            accounts.append(e)

    return accounts

def get_buckets(directory,account):
    buckets = []

    directory = "%s/%s" % (directory,account)

    try:
        entries = os.listdir(directory)

    except:
        print "Unable to read directory %s" % (directory)
        sys.exit(1)

    for e in entries:
        dir_path = "%s/%s" % (directory, e)
        if os.path.isdir(dir_path):
            buckets.append(e)

    return buckets

def get_objects(directory, account, bucket):
    objects = []

    directory = "%s/%s/%s" % (directory, account, bucket)

    try:
        entries = os.listdir(directory)

    except:
        print "Unable to read directory %s" % (directory)
        sys.exit(1)

    for e in entries:
        file_path = "%s/%s" % (directory, e)
        if os.path.isfile(file_path):
            objects.append(e)

    return objects

def sync_object(directory, account,bucket,obj,node):
    file_path = "%s/%s/%s/%s" % (directory, account, bucket, obj)
    dst_path = "/var/www/includes/scs/%s/%s/%s/%s" % (node, account, bucket, obj)
    cmd="/usr/bin/rsync -e 'ssh -o StrictHostKeyChecking=no' -qupz --delay-updates %s %s:%s" % (file_path, node, dst_path)
    print cmd

def main():
    a = parse_args(sys.argv[1:])

    if not os.path.isdir(a['directory']):
        print "Directory %s was not found." % a['directory']
        sys.exit(1)

    accounts = get_accounts(a['directory'])

    for account in accounts:
        print "account = %s" % account
        buckets = get_buckets(a['directory'], account)
        for bucket in buckets:
            print "bucket = %s" % bucket
            objects = get_objects(a['directory'], account, bucket)
            for obj in objects:
                print "object = %s" % obj
                nodes = get_object_nodes(account, bucket, obj)
                for node in nodes:
                    if node != a['fqdn']:
                        print "node = %s" % node
                        sync_object(a['directory'],account,bucket,obj,node)

if __name__ == '__main__':
    main()

