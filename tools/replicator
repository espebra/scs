#!/usr/bin/python
import subprocess
import json
import sys
import os

cfg = "/etc/scs/local.conf"

def read_file(path):
    if not os.path.exists(path):
        print "The file %s does not exist." % path
        sys.exit(2)
    
    with open(path, 'r') as f:
        content = f.read()
    
    try:
        c = json.loads(content)
    except:
        print "Unable to parse the content in %s" % path
        sys.exit(2)
    else:
        return c

    return False

def main():

    c = read_file(cfg)
    
    if not 'storage' in c:
        print "'storage' is not specified in %s" % cfg
        sys.exit(2)
    
    # Directories
    queue_path = "%s/queue/" % c['storage']
    objects_path = "%s/objects/" % c['storage']
    
    # Queue
    queue = []
    files = os.listdir(queue_path)
    files = sorted(files)
    #for file in files:
    #    print file
    selected = files[0]
    p = "%s/%s" % (queue_path, selected)
    q = read_file(p)

    #print q
    src = q['path'][1:]
    host = q['host']
    base = q['base']

    # rsync -rRzSut "images/bd/5d/Y3Jvc2J5XzEwMDAyOTFfby5qcGc=" rsync://10.0.0.4/scs
    cmd = ['rsync', '-rRzSut', "%s" % src, "rsync://%s/scs" % host]
    #print cmd
    pr = subprocess.Popen(cmd,
           cwd=base,
           stdout=subprocess.PIPE, 
           stderr=subprocess.PIPE, 
           shell=False)
    
    (out, error) = pr.communicate()

    if pr.returncode == 0:
        try:
            os.unlink(p)
        except:
            print "Unable to unlink queue file %s" % p
            sys.exit(2)
        else:
            # All OK
            sys.exit(0)
    else:
        print "Error: cmd=%s, stdout=%s, stderr=%s, retcode=%s" % \
            (" ".join(cmd), out, error, pr.returncode)
    
if __name__ == '__main__':
    main()
